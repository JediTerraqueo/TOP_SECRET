import pygame
import sys
import os
from random import randrange
import pygameMenu
from pygame.locals import *

sys.path.insert(0, '../../')

# -----------------------------------------------------------------------------
# Constantes e variaveis gloais
# -----------------------------------------------------------------------------

# Variaveis uteis
velocidade = 8
W = 800
H = 600
BLACK = (0, 0, 0)
lives = 3
COLOR_BACKGROUND = (0, 0, 0)
COLOR_BLACK = (0, 255, 0)
COLOR_WHITE = (255, 255, 255)
DIFFICULTY = ['EASY']
FPS = 60.0
MENU_BACKGROUND_COLOR = (0, 0, 0)
WINDOW_SIZE = (W , H)
walkCount = 0
X = 0

clock = None
main_menu = None
surface = None

# -----------------------------------------------------------------------------
# Methods
# -----------------------------------------------------------------------------
def events():
    for event in pygame.event.get():
        if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
            pygame.quit()
            sys.exit()

def change_difficulty(value, difficulty):

    selected, index = value
    print('Selected difficulty: "{0}" ({1}) at index {2}'.format(selected, difficulty, index))
    DIFFICULTY[0] = difficulty


def random_color():

    return randrange(0, 255), randrange(0, 255), randrange(0, 255)


def play_function(difficulty, font, test=False):

    assert isinstance(difficulty, (tuple, list))
    difficulty = difficulty[0]
    assert isinstance(difficulty, str)

    # Define globals
    global main_menu
    global clock

    # Reset main menu and disable
    # You also can set another menu, like a 'pause menu', or just use the same
    # main_menu as the menu that will check all your input.
    main_menu.disable()
    main_menu.reset(1)
    pos_x = 0
    pos_y = 270
    x = -310
    y = -210
    while True:

        # Clock tick
        clock.tick(60)

        # Application events
        events = pygame.event.get()
        for e in events:
            if e.type == pygame.QUIT:
                exit()
            elif e.type == pygame.KEYDOWN:
                if e.key == pygame.K_ESCAPE and main_menu.is_disabled():
                    main_menu.enable()

                    # Quit this function, then skip to loop of main-menu on line 317
                    return

        # Pass events to main_menu
        main_menu.mainloop(events)

        win = pygame.display.set_mode((W, H))
        pygame.display.set_caption("Tapa Buraco")

        walkRight = [pygame.image.load('R1.png'), pygame.image.load('R2.png'), pygame.image.load('R3.png'),
                     pygame.image.load('R4.png'), pygame.image.load('R5.png'), pygame.image.load('R6.png'),
                     pygame.image.load('R7.png'), pygame.image.load('R8.png'), pygame.image.load('R9.png')]
        walkLeft = [pygame.image.load('L1.png'), pygame.image.load('L2.png'), pygame.image.load('L3.png'),
                    pygame.image.load('L4.png'), pygame.image.load('L5.png'), pygame.image.load('L6.png'),
                    pygame.image.load('L7.png'), pygame.image.load('L8.png'), pygame.image.load('L9.png')]
        bg = pygame.image.load('Fundo em 8 bits_3.png')
        parallax = pygame.image.load('fundo_ceu_final.png')
        char = pygame.image.load('standing.png')
        heart = pygame.image.load('coração_3.png')
        clock = pygame.time.Clock()

        class player(object):
            def __init__(self, x, y, W, H):
                self.x = x
                self.y = y
                self.W = W
                self.H = H
                self.vel = 5
                self.isJump = False
                self.left = False
                self.right = False
                self.standing = True
                self.walkCount = 0
                self.jumpCount = 10
                self.hitbox = (self.x + 17, self.y + 11 , 29, 52)

            def draw(self,win):
                if self.walkCount + 1 >= 27:
                    self.walkCount = 0
                if not(self.standing):
                    if self.left:
                        win.blit(walkLeft[self.walkCount // 3], (self.x, self.y))
                        self.walkCount += 1
                    elif self.right:
                        win.blit(walkRight[self.walkCount // 3], (self.x, self.y))
                        self.walkCount += 1
                else:
                    if self.right:
                        win.blit(walkRight[0], (self.x, self.y))
                    else:
                        win.blit(walkLeft[0], (self.x, self.y))
                self.hitbox = (self.x + 17, self.y + 11 , 29, 52)
                pygame.draw.rect(win, (255,0,0), self.hitbox, 2)


        class enemy(object):
            walkRight = [pygame.image.load('R1E.png'), pygame.image.load('R2E.png'), pygame.image.load('R3E.png'),
                         pygame.image.load('R4E.png'), pygame.image.load('R5E.png'), pygame.image.load('R6E.png'),
                         pygame.image.load('R7E.png'), pygame.image.load('R8E.png'), pygame.image.load('R9E.png'),
                         pygame.image.load('R10E.png'), pygame.image.load('R11E.png')]
            walkLeft = [pygame.image.load('L1E.png'), pygame.image.load('L2E.png'), pygame.image.load('L3E.png'),
                        pygame.image.load('L4E.png'), pygame.image.load('L5E.png'), pygame.image.load('L6E.png'),
                        pygame.image.load('L7E.png'), pygame.image.load('L8E.png'), pygame.image.load('L9E.png'),
                        pygame.image.load('L10E.png'), pygame.image.load('L11E.png')]
            colision = [pygame.image.load('primeira fase.png'), pygame.image.load('segunda fase.png'), pygame.image.load('terceira fase.png'),
                        pygame.image.load('quarta fase.png'), pygame.image.load('quinta fase.png'), pygame.image.load('sexta fase.png'),
                        pygame.image.load('setima fase.png'), pygame.image.load('oitava fase.png'), pygame.image.load('nona fase.png'),
                        pygame.image.load('decima fase.png')]

            def __init__(self, x ,y, W, H, end):
                self.x = x
                self.y = y
                self.W = W
                self.H = H
                self.end = end
                self.path = [self.x, self.y]
                self.walkCount = 0
                self.vel = 3
                self.time = 10
                self.hitbox = (self.x + 17, self.y + 2, 31, 57)

            def draw(self,win):
                self.move()
                if self.walkCount + 1 >= 33:
                    self.walkCount = 0
                if self.vel > 0:
                    win.blit(self.walkRight[self.walkCount // 3], (self.x, self.y))
                    self.walkCount += 1
                if self.vel < 0:
                    win.blit(self.walkLeft[self.walkCount // 3], (self.x, self.y))
                    self.walkCount += 1
                self.hitbox = (self.x + 17, self.y + 2, 31, 57)
                pygame.draw.rect(win, (255,0,0), self.hitbox, 2)

            def move(self):
                if self.vel > 0:
                    if self.x  + self.vel < self.path[1]:
                        self.x += self.vel
                    else:
                        self.vel = self.vel * -1
                        self.walkCount = 0
                else:
                    if self.x - self.vel > self.path[0]:
                        self.x += self.vel
                    else:
                        self.vel = self.vel * -1
                        self.walkCount = 0
                pass

            def hit(self):
                print("hit")
                #win.blit(self.colision[self.time // ], (self.x, self.y))

        class projectile(object):
            def __init__(self, x, y, radius, color, facing):
                self.x = x
                self.y = y
                self.radius = radius
                self.color = color
                self.facing = facing
                self.vel = 8 * facing

            def draw(self,win):
                pygame.draw.circle(win, self.color, (self.x, self.y), self.radius)

        def redrawgamewindow():
            global X
            rel_x = X % bg.get_rect().width
            win.blit(parallax, (rel_x - parallax.get_rect().width, 0))
            if rel_x < W:
                win.blit(parallax, (rel_x, 0))
            X -= 1
            win.blit(bg, (0, 0))
            man.draw(win)
            goblin.draw(win)
            for bullet in bullets:
                bullet.draw(win)
            win.blit(heart, (10, 10))
            win.blit(heart, (10 + 40, 10))
            win.blit(heart, (10 + 80, 10))


            pygame.display.update()

        #main loop
        man = player(10, 485, 64, 64)
        goblin = enemy(100, 490, 64, 64, 450)
        shootloop = 0
        run = True
        bullets = []
        while run:
            while run:
                clock.tick(27)

                if shootloop > 0:
                    shootloop += 1
                if shootloop > 3:
                    shootloop = 0

                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        run = False

                for bullet in bullets:
                    if bullet.y - bullet.radius < goblin.hitbox[1] + goblin.hitbox[3] and bullet.y + bullet.radius > goblin.hitbox[1]:
                        if bullet.x + bullet.radius > goblin.hitbox[0] and bullet.x - bullet.radius < goblin.hitbox[0] + goblin.hitbox[2]:
                            goblin.hit()
                            bullets.pop(bullets.index(bullet))

                    if bullet.x < 800 and bullet.x > 0:
                        bullet.x += bullet.vel
                    else:
                        bullets.pop(bullets.index(bullet))

                keys = pygame.key.get_pressed()

                if keys[pygame.K_z] and shootloop == 0:
                    if man.left:
                        facing = -1

                    else:
                        facing = 1

                    if len(bullets) < 5:
                        bullets.append(projectile(round(man.x + man.W//2), round(man.y + man.H//2), 6 , (0,0,0), facing))
                    shootloop = 1

                if keys[pygame.K_LEFT]:
                    man.x -= man.vel
                    man.left = True
                    man.right = False
                    man.standing = False

                elif keys[pygame.K_RIGHT]:
                    man.x += man.vel
                    man.left = False
                    man.right = True
                    man.standing = False

                elif keys[pygame.K_ESCAPE]:
                    if __name__ == '__main__':
                        main()
                else:
                    man.standing = True
                    man.walkCount = 0

                if not (man.isJump):
                    if keys[pygame.K_SPACE]:
                        man.isJump = True
                        man.left = False
                        man.right = False
                        man.walkCount = 0
                else:
                    if man.jumpCount >= -10:
                        man.y -= (man.jumpCount * abs(man.jumpCount)) * 0.5
                        man.jumpCount -= 1
                    else:
                        man.jumpCount = 10
                        man.isJump = False

                redrawgamewindow()

            pygame.quit()

        if test:
            break

def main_background():
    """
    Function used by menus, draw on background while menu is active.
    :return: None
    """
    global surface
    surface.fill(COLOR_BACKGROUND)


def main(test=False):
    """
    Main program.
    :param test: Indicate function is being tested
    :type test: bool
    :return: None
    """

    # -------------------------------------------------------------------------
    # Globais
    # -------------------------------------------------------------------------
    global clock
    global main_menu
    global surface

    # -------------------------------------------------------------------------
    # Init pygame
    # -------------------------------------------------------------------------
    pygame.init()
    os.environ['SDL_VIDEO_CENTERED'] = '1'

    # Create pygame screen and objects
    surface = pygame.display.set_mode(WINDOW_SIZE)
    pygame.display.set_caption("Tapa buraco")
    clock = pygame.time.Clock()
    # -------------------------------------------------------------------------
    # Cria menus
    # -------------------------------------------------------------------------

    # Play menu
    play_menu = pygameMenu.Menu(surface,
                                bgfun=main_background,
                                color_selected=COLOR_WHITE,
                                font=pygameMenu.font.FONT_BEBAS,
                                font_color=COLOR_BLACK,
                                font_size=30,
                                menu_alpha=0,
                                menu_color=MENU_BACKGROUND_COLOR,
                                menu_height=int(H * 0.7),
                                menu_width=int(W * 0.7),
                                onclose=pygameMenu.events.DISABLE_CLOSE,
                                option_shadow=False,
                                title='Menu de Jogo',
                                window_height=H,
                                window_width=W
                                )

    play_submenu = pygameMenu.Menu(surface,
                                   bgfun=main_background,
                                   color_selected=COLOR_WHITE,
                                   font=pygameMenu.font.FONT_BEBAS,
                                   font_color=COLOR_BLACK,
                                   font_size=30,
                                   menu_alpha=0,
                                   menu_color=MENU_BACKGROUND_COLOR,
                                   menu_height=int(H * 0.5),
                                   menu_width=int(W * 0.7),
                                   option_shadow=False,
                                   title='Submenu',
                                   window_height=H,
                                   window_width=W
                                   )
    play_submenu.add_option('Back', pygameMenu.events.BACK)

    play_menu.add_option('Jogar',  # When pressing return -> play(DIFFICULTY[0], font)
                         play_function,
                         DIFFICULTY,
                         pygame.font.Font(pygameMenu.font.FONT_FRANCHISE, 30))
    play_menu.add_selector('Escolha a dificuldade',
                           [('1 - Facil', 'EASY'),
                            ('2 - Medio', 'MEDIUM'),
                            ('3 - Dificil', 'HARD')],
                           onchange=change_difficulty,
                           selector_id='select_difficulty')
    play_menu.add_option('Outro menu', play_submenu)
    play_menu.add_option('Retornar para o menu principal', pygameMenu.events.BACK)

    # Rank menu
    rank_menu = pygameMenu.TextMenu(surface,
                                     bgfun=main_background,
                                     color_selected=COLOR_WHITE,
                                     font=pygameMenu.font.FONT_BEBAS,
                                     font_color=COLOR_BLACK,
                                     font_size_title=30,
                                     font_title=pygameMenu.font.FONT_8BIT,
                                     menu_color=MENU_BACKGROUND_COLOR,
                                     menu_color_title=COLOR_BACKGROUND,
                                     menu_height=int(H * 0.6),
                                     menu_width=int(W * 0.6),
                                     onclose=pygameMenu.events.DISABLE_CLOSE,
                                     option_shadow=False,
                                     text_color=COLOR_BLACK,
                                     text_fontsize=20,
                                     title='Rank',
                                     window_height=H,
                                     window_width=W
                                     )
    rank_menu.add_option('Back', pygameMenu.events.BACK)
    # Main menu
    main_menu = pygameMenu.Menu(surface,
                                bgfun=main_background,
                                color_selected=COLOR_WHITE,
                                font=pygameMenu.font.FONT_BEBAS,
                                font_color=COLOR_BLACK,
                                font_size=30,
                                menu_alpha=0,
                                menu_color=MENU_BACKGROUND_COLOR,
                                menu_height=int(H * 0.6),
                                menu_width=int(W * 0.6),
                                onclose=pygameMenu.events.DISABLE_CLOSE,
                                option_shadow=False,
                                title='Tapa buraco',
                                window_height=H,
                                window_width=W
                                )

    main_menu.add_option('Jogar', play_menu)
    main_menu.add_option('Rank', rank_menu)
    main_menu.add_option('Sair', pygameMenu.events.EXIT)

    # Configure main menu
    main_menu.set_fps(FPS)

    # -------------------------------------------------------------------------
    # Main loop
    # -------------------------------------------------------------------------
    while True:

        # Tick
        clock.tick(FPS)

        # Paint background
        main_background()

        # Application events
        events = pygame.event.get()
        for event in events:
            if event.type == pygame.QUIT:
                exit()

        # Main menu
        main_menu.mainloop(events, disable_loop=test)

        # Flip surface
        pygame.display.flip()

        # At first loop returns
        if test:
           break
if __name__ == '__main__':
    main()
